apiVersion: v1
data:
  k8s_job.py: |
    from bytewax_k8s_job import BytewaxMaterializationJob

    if __name__ == "__main__":
          store = FeatureStore(repo_path=".")
          job = BytewaxMaterializationJob(
              store.config,
              store.get_feature_view("driver_stats"),
              timedelta(days=-1),
              datetime.now(),
              "driver_project",
          )
          job.run_dataflow()
kind: ConfigMap
metadata:
  name: dataflow
---
apiVersion: batch/v1
kind: Job
metadata:
  name: 'dataflow'
spec:
  completions: 3
  parallelism: 3
  completionMode: Indexed
  template:
    spec:
      restartPolicy: Never
      subdomain: dataflow-subdomain
      initContainers:
      - command:
        - sh
        - -c
        - |
          set -ex
          # Generate hostfile.txt.
          echo "dataflow-0.dataflow-subdomain.default.svc.cluster.local:9999" > /etc/bytewax/hostfile.txt
          replicas=$(($BYTEWAX_REPLICAS-1))
          x=1
          while [ $x -le $replicas ]
          do
            echo "dataflow-$x.dataflow-subdomain.default.svc.cluster.local:9999" >> /etc/bytewax/hostfile.txt
            x=$(( $x + 1 ))
          done
          # Copy python files to working directory
          cp /tmp/bytewax/. /var/bytewax -R
          cd /var/bytewax
          tar -xvf *.tar || echo "No tar files found."
        env:
        - name: BYTEWAX_REPLICAS
          value: "3"
        image: busybox
        imagePullPolicy: Always
        name: init-hostfile
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          readOnlyRootFilesystem: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/bytewax
          name: hostfile
        - mountPath: /var/bytewax/
          name: working-directory
        - mountPath: /tmp/bytewax/
          name: python-files
      containers:
      - command:
        - sh
        - -c
        - sh ./entrypoint.sh
        env:
        - name: RUST_LOG
          value: librdkafka=debug,rdkafka::client=debug
        - name: RUST_BACKTRACE
          value: full
        - name: BYTEWAX_PYTHON_FILE_PATH
          value: /var/bytewax/basic.py
        - name: BYTEWAX_WORKDIR
          value: /var/bytewax
        - name: BYTEWAX_WORKERS_PER_PROCESS
          value: "1"
        - name: BYTEWAX_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.annotations['batch.kubernetes.io/job-completion-index']
        - name: BYTEWAX_REPLICAS
          value: "3"
        - name: BYTEWAX_KEEP_CONTAINER_ALIVE
          value: "false"
        - name: BYTEWAX_HOSTFILE_PATH
          value: /etc/bytewax/hostfile.txt
        - name: BYTEWAX_STATEFULSET_NAME
          value: my-dataflow
        image: bytewax/bytewax:latest
        imagePullPolicy: Always
        name: process
        ports:
        - containerPort: 9999
          name: process
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          readOnlyRootFilesystem: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/bytewax
          name: hostfile
        - mountPath: /var/bytewax/
          name: working-directory
      volumes:
      - emptyDir: {}
        name: hostfile
      - configMap:
          defaultMode: 420
          name: dataflow
        name: python-files
      - emptyDir: {}
        name: working-directory
---
apiVersion: v1
kind: Service
metadata:
  name: dataflow-subdomain
spec:
  clusterIP: None
  clusterIPs:
  - None
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: worker
    port: 9999
    protocol: TCP
    targetPort: 9999
  selector:
    job-name: dataflow
  sessionAffinity: None
  type: ClusterIP
